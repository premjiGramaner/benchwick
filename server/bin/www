/**
 * Moduler dependencies.
 */
var app = require('../app'),
  debug = require('debug')('reactnode:server'),
  http = require('http'),
  sequlizer = require('../models/index'),
  { Server } = require("socket.io"),
  { loadInstance } = require('../controllers/sockets');

var port = normalizePort(process.env.APP_PORT || '5001');
app.Sequlizer_port = port;

var server = http.createServer(app);
var io = new Server({ server });
io.listen('5003');

sequlizer.sequelize.sync({ force: false }).then(() => {
  app.listen(app.Sequlizer_port, () => {
    io.on('connection', function (socket) {
      loadInstance(socket)
    });

    console.log(`server listening on PORT ${app.Sequlizer_port}`);
  });
});

server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }
  return false;
}


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = { io };
exports = app;